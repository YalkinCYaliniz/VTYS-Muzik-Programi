from psycopg2 import connect,extensions
from prettytable import PrettyTable
from prettytable import from_db_cursor
auto_commit = extensions.ISOLATION_LEVEL_AUTOCOMMIT
dbismi = "muzikprogrami"
def createDB():
        conn = connect(host = "localhost",
                        user = "postgres",
                        password = "1411", 
                        port = 5432)
        conn.set_isolation_level(auto_commit)
        cur = conn.cursor()
        create_db = f"SELECT 1 FROM pg_catalog.pg_database WHERE datname = '{dbismi}'"
        cur.execute(create_db)
        exists = cur.fetchone()
        if not exists:
            cur.execute(f'CREATE DATABASE {dbismi}')
            conn.close
            conn = connect(host = "localhost",
                      user = "postgres",
                      password = "1411", 
                      port = 5432,
                      database = dbismi)
            conn.set_isolation_level(auto_commit)
            cur = conn.cursor() 
            """/* TABLOLAR */"""
            cur.execute("""CREATE TABLE IF NOT EXISTS sanatci (           
                        sanatciID SERIAL PRIMARY KEY,
                        sanatciAdi VARCHAR(255) NOT NULL,
                        ulke VARCHAR(255),
                        bio TEXT
                        );              
                        """)
            cur.execute("""CREATE TABLE IF NOT EXISTS konser(
                        konserID SERIAL PRIMARY KEY,
                        sanatciID INTEGER,
                        CONSTRAINT sanatciID FOREIGN KEY(sanatciID)
                        REFERENCES sanatci(sanatciID)ON DELETE CASCADE,
                        mekan TEXT,
                        tarih DATE,
                        biletSayisi INTEGER
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS podcast(
                        podcastID SERIAL PRIMARY KEY,
                        sanatciID INTEGER,
                        CONSTRAINT sanatciID FOREIGN KEY(sanatciID)
                        REFERENCES sanatci(sanatciID)ON DELETE CASCADE,
                        baslik VARCHAR(30) NOT NULL
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS tur(
                        turID SERIAL PRIMARY KEY,
                        turAdi VARCHAR(30) NOT NULL
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS album(
                        albumID SERIAL PRIMARY KEY,
                        sanatciID INTEGER,
                        CONSTRAINT sanatciID FOREIGN KEY(sanatciID)
                        REFERENCES sanatci(sanatciID)ON DELETE CASCADE,
                        turID INTEGER,
                        CONSTRAINT turID FOREIGN KEY(turID)
                        REFERENCES tur(turID),
                        yayinTarih DATE,
                        albumAdi VARCHAR(55) NOT NULL
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS sarki(
                        sarkiID SERIAL PRIMARY KEY,
                        albumID INTEGER,
                        CONSTRAINT albumID FOREIGN KEY(albumID)
                        REFERENCES album(albumID)ON DELETE CASCADE,
                        sarkiAdi VARCHAR(50) NOT NULL,
                        sure FLOAT 
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS muzik_video(
                        videoID SERIAL PRIMARY KEY,
                        sarkiID INTEGER,
                        CONSTRAINT sarkiID FOREIGN KEY(sarkiID)
                        REFERENCES sarki(sarkiID)ON DELETE CASCADE,
                        yonetmen VARCHAR(50) NOT NULL,
                        cekimTarihi DATE,
                        link TEXT NOT NULL
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS katkida_bulunan(
                        yazarID SERIAL PRIMARY KEY,
                        albumID INTEGER,
                        CONSTRAINT albumID FOREIGN KEY(albumID)
                        REFERENCES album(albumID)ON DELETE CASCADE,
                        ad VARCHAR(50) NOT NULL,
                        katkiTuru TEXT
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS soz_yazari( 
	                    yazarID INTEGER PRIMARY KEY,
	                    sarkiSozu TEXT NOT NULL,
                        sarkiAdi TEXT,
                        CONSTRAINT yazarID FOREIGN KEY(yazarID)
	                    REFERENCES katkida_bulunan(yazarID)
	                    ON DELETE CASCADE
	                    ON UPDATE CASCADE
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS ensturman( 
	                    yazarID INTEGER PRIMARY KEY,
	                    ensturmanAdi VARCHAR(255),
                        CONSTRAINT yazarID FOREIGN KEY (yazarID)
	                  REFERENCES ensturman(yazarID)
	                  ON DELETE CASCADE
	                  ON UPDATE CASCADE
                  );""")

            cur.execute("""CREATE TABLE IF NOT EXISTS produktor( 
	                    yazarID INTEGER PRIMARY KEY,
	                    calistigiSirket VARCHAR(50) NOT NULL,
                        CONSTRAINT yazarID FOREIGN KEY (yazarID)
	                    REFERENCES produktor(yazarID)
	                    ON DELETE CASCADE
	                    ON UPDATE CASCADE
                    );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS kullanici( 
	                    kullaniciID SERIAL PRIMARY KEY,
	                    kullaniciAdi VARCHAR(50) NOT NULL,
                        sifre VARCHAR(50) NOT NULL ,
                        mail VARCHAR(200) NOT NULL,
                        uyelikTarihi DATE DEFAULT '2000-01-01',
                        hesapturu VARCHAR(1)
                    );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS premium( 
	                    kullaniciID INTEGER PRIMARY KEY,
	                    fiyat INTEGER,
                        CONSTRAINT listeID FOREIGN KEY(kullaniciID)
	                    REFERENCES kullanici(kullaniciID)
	                    ON DELETE CASCADE
	                    ON UPDATE CASCADE
                    );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS standart( 
	                        kullaniciID INTEGER PRIMARY KEY,
	                        gecilenReklam INTEGER,
                            CONSTRAINT listeID FOREIGN KEY(kullaniciID)
	                        REFERENCES kullanici(kullaniciID)
	                        ON DELETE CASCADE
	                        ON UPDATE CASCADE
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS calma_listesi(
                            listeID SERIAL PRIMARY KEY,
                            kullaniciID INTEGER,
                            CONSTRAINT kullaniciID FOREIGN KEY(kullaniciID)
                            REFERENCES kullanici(kullaniciID)ON DELETE CASCADE,
                            calmalistesiAdi VARCHAR(30) NOT NULL
                            );""")

            cur.execute("""CREATE TABLE IF NOT EXISTS degerlendirme(
                            degerlendirmeID SERIAL PRIMARY KEY,
                            sarkiID INTEGER,
                            kullaniciID INTEGER,
                            tarih DATE,
                            degerlendirmeTuru TEXT,
                            CONSTRAINT sarkiID FOREIGN KEY(sarkiID)
                            REFERENCES sarki(sarkiID) ON DELETE CASCADE,
                            CONSTRAINT kullaniciID FOREIGN KEY(kullaniciID)
                            REFERENCES kullanici(kullaniciID)ON DELETE CASCADE
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS oy( 
	                        degerlendirmeID INTEGER PRIMARY KEY,
                            oySayisi INTEGER,
                            CONSTRAINT degerlendirmeID FOREIGN KEY(degerlendirmeID)
	                        REFERENCES degerlendirme(degerlendirmeID)
	                        ON DELETE CASCADE
	                        ON UPDATE CASCADE
                        );""")
            cur.execute("""CREATE TABLE IF NOT EXISTS inceleme( 
	                        degerlendirmeID INTEGER PRIMARY KEY,
                            incelemeMetni TEXT,
                            CONSTRAINT degerlendirmeID FOREIGN KEY(degerlendirmeID)
	                        REFERENCES degerlendirme(degerlendirmeID)
	                        ON DELETE CASCADE
	                    ON UPDATE CASCADE
                    );""")
            """/* FONKSÄ°YONLAR- PROSEDURLER */"""
            cur.execute("""CREATE OR REPLACE FUNCTION album_ara(aranan_kelime VARCHAR(255))
            RETURNS TABLE(album_adi VARCHAR)AS $$
BEGIN
    RETURN QUERY SELECT albumAdi
                 FROM album WHERE lower(albumAdi) LIKE '%' || lower(aranan_kelime) || '%';
END;
$$ LANGUAGE plpgsql;
""")

            cur.execute("""CREATE OR REPLACE FUNCTION premium_kullanici_ekle(
                        kullaniciAdi VARCHAR(255),
                        sifre VARCHAR(255),
                        mail VARCHAR(255),
                        uyelikTarihi DATE,
                        fiyat INT
                        )RETURNS VOID AS $$
                        DECLARE 
                            kullanici_id INTEGER;
                        BEGIN
                            INSERT INTO kullanici(kullaniciAdi,sifre,mail,uyelikTarihi,hesapturu) VALUES
                        (kullaniciAdi,sifre,mail,uyelikTarihi,'p')RETURNING "kullaniciid" INTO kullanici_id;
                            INSERT INTO premium(kullaniciid,fiyat) VALUES (kullanici_id,fiyat);
                        END;
                        $$ LANGUAGE plpgsql;
                        """)
            cur.execute("""CREATE OR REPLACE FUNCTION standart_kullanici_ekle(
                        kullaniciAdi VARCHAR(50),
                        sifre VARCHAR(50),
                        mail VARCHAR(200),
                        uyelikTarihi DATE,
                        gecilenReklam INT
                        )RETURNS VOID AS $$
                        DECLARE 
                            kullanici_id INTEGER;
                        BEGIN
                            INSERT INTO kullanici(kullaniciAdi,sifre,mail,uyelikTarihi,hesapturu) VALUES
                        (kullaniciAdi,sifre,mail,uyelikTarihi,'s')RETURNING "kullaniciid" INTO kullanici_id;
                            INSERT INTO standart(kullaniciid,gecilenReklam) VALUES (kullanici_id,gecilenReklam);
                        END;
                        $$ LANGUAGE plpgsql;
                        """)

            cur.execute("""CREATE OR REPLACE FUNCTION oy_ile_degerlendirme(
                        sarkiID INTEGER,
                        kullaniciID INTEGER,
                        tarih DATE,
                        oySayisi INT
                        )RETURNS VOID AS $$
                        DECLARE 
                            degerlendirme_id INTEGER;
                        BEGIN
                            INSERT INTO degerlendirme(sarkiID,kullaniciID,tarih,degerlendirmeTuru) VALUES
                        (sarkiID,kullaniciID,tarih,'oy')RETURNING "degerlendirmeid" INTO degerlendirme_id;
                            INSERT INTO oy(degerlendirmeid,oySayisi) VALUES (degerlendirme_id,oySayisi);
                        END;
                        $$ LANGUAGE plpgsql;
                        """)
            cur.execute("""CREATE OR REPLACE FUNCTION inceleme_ile_degerlendirme(
                        sarkiID INTEGER,
                        kullaniciID INTEGER,
                        tarih DATE,
                        incelemeMetni TEXT
                        )RETURNS VOID AS $$
                        DECLARE 
                            degerlendirme_id INTEGER;
                        BEGIN
                            INSERT INTO degerlendirme(sarkiID,kullaniciID,tarih,degerlendirmeTuru) VALUES
                        (sarkiID,kullaniciID,tarih,'inceleme')RETURNING "degerlendirmeid" INTO degerlendirme_id;
                            INSERT INTO inceleme(degerlendirmeid,incelemeMetni) VALUES (degerlendirme_id,incelemeMetni);
                        END;
                        $$ LANGUAGE plpgsql;
                        """)
            cur.execute("""CREATE OR REPLACE FUNCTION degerlendirme_goruntule(degerlendirme_id INTEGER)
RETURNS TEXT AS $$
DECLARE
    deger TEXT;
BEGIN
    SELECT INTO deger CASE
        WHEN d.degerlendirmeTuru = 'oy' THEN
            (SELECT o.oySayisi::TEXT FROM oy o WHERE o.degerlendirmeid = degerlendirme_id)
        WHEN d.degerlendirmeTuru = 'inceleme' THEN
            (SELECT i.incelemeMetni FROM inceleme i WHERE i.degerlendirmeid = degerlendirme_id)
    END
    FROM degerlendirme d WHERE d.degerlendirmeid = degerlendirme_id;

    RETURN deger;
END;
$$ LANGUAGE plpgsql;

""")
            cur.execute("""CREATE OR REPLACE FUNCTION kullanici_goruntule(kullanici_id INTEGER)
RETURNS TEXT AS $$
DECLARE
    deger TEXT;
BEGIN
    SELECT INTO deger CASE
        WHEN k.hesapTuru = 'p' THEN
            (SELECT p.fiyat FROM premium p WHERE p.kullaniciid = kullanici_id)
        WHEN k.hesapTuru = 's' THEN
            (SELECT s.gecilenReklam as GecilenReklam FROM standart s WHERE s.kullaniciid= kullanici_id)
    END
    FROM kullanici k WHERE k.kullaniciid = kullanici_id;

    RETURN deger;
END;
$$ LANGUAGE plpgsql;

""")
            
            

            cur.execute("""CREATE OR REPLACE FUNCTION katkida_bulunan_ekle_soz(
                        albumid INTEGER,
                        ad VARCHAR,
                        sarkiSozu TEXT,
                        sarkiAdi TEXT
                        )RETURNS VOID AS $$
                        DECLARE 
                            yazar_id INTEGER;
                        BEGIN
                            INSERT INTO katkida_bulunan(albumid,ad,katkiTuru) VALUES
                        (albumid,ad,'SÃ¶z YazarÄ±')RETURNING "yazarid" INTO yazar_id;
                            INSERT INTO soz_yazari(yazarid,sarkiAdi,sarkiSozu) VALUES (yazar_id,sarkiAdi,sarkiSozu);
                        END;
                        $$ LANGUAGE plpgsql;
                        """)
            cur.execute("""CREATE OR REPLACE FUNCTION katkida_bulunan_ekle_produktor(
                        albumid INTEGER,
                        ad VARCHAR,
                        calistigiSirket TEXT
                        )RETURNS VOID AS $$
                        DECLARE 
                            yazar_id INTEGER;
                        BEGIN
                            INSERT INTO katkida_bulunan(albumid,ad,katkiTuru) VALUES
                        (albumid,ad,'ProdÃ¼ktÃ¶r')RETURNING "yazarid" INTO yazar_id;
                            INSERT INTO produktor(yazarid,calistigiSirket) VALUES (yazar_id,calistigiSirket);
                        END;
                        $$ LANGUAGE plpgsql;
                        """)
            cur.execute("""CREATE OR REPLACE FUNCTION katkida_bulunan_ekle_ensturman(
                        albumid INTEGER,
                        ad VARCHAR,
                        ensturmanAdi TEXT
                        )RETURNS VOID AS $$
                        DECLARE 
                            yazar_id INTEGER;
                        BEGIN
                            INSERT INTO katkida_bulunan(albumid,ad,katkiTuru) VALUES
                        (albumid,ad,'EnstÃ¼rman')RETURNING "yazarid" INTO yazar_id;
                            INSERT INTO ensturman(yazarid,ensturmanAdi) VALUES (yazar_id,ensturmanAdi);
                        END;
                        $$ LANGUAGE plpgsql;
                        """)
            cur.execute("""CREATE OR REPLACE PROCEDURE sarki_ekle(albumid int,sarkiAdi VARCHAR(55),sure FLOAT) 
                        LANGUAGE SQL
                        AS $$
                        INSERT INTO sarki(albumid,sarkiAdi,sure) values 
                        (albumid,sarkiAdi,sure);
                        $$;
                    """)
            
            cur.execute("""CREATE OR REPLACE FUNCTION upgrade_to_premium(kullanici_id INTEGER, fiyat INTEGER)
RETURNS VOID AS $$
BEGIN
    DELETE FROM standart WHERE kullaniciID = kullanici_id;
    INSERT INTO premium (kullaniciID, fiyat) VALUES (kullanici_id, fiyat);
    UPDATE kullanici set hesapturu = 'p' where kullaniciid = kullanici_id;
END;
$$ LANGUAGE plpgsql;
 """)
            cur.execute("""CREATE OR REPLACE FUNCTION upgrade_to_standart(kullanici_id INTEGER, gecilenReklam INTEGER)
RETURNS VOID AS $$
BEGIN
    DELETE FROM premium WHERE kullaniciID = kullanici_id;
    INSERT INTO standart (kullaniciID, gecilenReklam) VALUES (kullanici_id, gecilenReklam);
    UPDATE kullanici set hesapturu = 's' where kullaniciid = kullanici_id;
END;
$$ LANGUAGE plpgsql;
 """)
            cur.execute("""CREATE OR REPLACE FUNCTION upgrade_account(kullanici_id INTEGER,detay int) RETURNS VOID AS $$
DECLARE
    hesap_turu CHAR(1);
BEGIN
    SELECT hesapturu INTO hesap_turu
    FROM kullanici
    WHERE kullaniciid = kullanici_id;

    IF hesap_turu = 'p' THEN
        PERFORM upgrade_to_standart(kullanici_id,detay);
    ELSIF hesap_turu = 's' THEN
        PERFORM upgrade_to_premium(kullanici_id,detay);
    END IF;
END;
$$ LANGUAGE plpgsql;
""")


            cur.execute("""CREATE FUNCTION fn_katkida_bulunan_goster (album_id INTEGER)
RETURNS TABLE (
    ad VARCHAR(50),
    katkituru TEXT,
    detay TEXT
)
AS $$
BEGIN
    RETURN QUERY
    SELECT k.ad, k.katkituru, 
    CASE 
        WHEN k.katkituru = 'SÃ¶z YazarÄ±' THEN s.sarkisozu
        WHEN k.katkituru = 'EnstÃ¼rman' THEN e.ensturmanadi
        WHEN k.katkituru = 'ProdÃ¼ktÃ¶r' THEN p.calistigisirket
        ELSE 'Bilinmiyor'
    END AS detay
    FROM katkida_bulunan k
    LEFT JOIN soz_yazari s ON k.yazarid = s.yazarid
    LEFT JOIN ensturman e ON k.yazarid = e.yazarid
    LEFT JOIN produktor p ON k.yazarid = p.yazarid
    WHERE k.albumid = album_id;
END;
$$ LANGUAGE plpgsql;







 """)
            cur.execute("""CREATE OR REPLACE FUNCTION album_sure_hesapla(album_id INTEGER)
RETURNS INTERVAL AS $$
DECLARE
    total_duration INTERVAL := '00:00:00';
    song_duration INTERVAL;
BEGIN
    FOR song_duration IN (SELECT sure FROM sarki WHERE albumid = album_id) LOOP
        total_duration := total_duration + song_duration;
    END LOOP;

    RETURN total_duration;
END;
$$ LANGUAGE plpgsql;
""")
            """TRIGER"""    
            cur.execute(""" 
ALTER TABLE sanatci ADD COLUMN album_sayisi INT;

UPDATE sanatci SET album_sayisi = (SELECT COUNT(*) FROM album WHERE sanatci.sanatciID = album.sanatciID);

CREATE OR REPLACE FUNCTION update_album_sayisi() RETURNS TRIGGER AS $$
BEGIN
  
    UPDATE sanatci SET album_sayisi = (SELECT COUNT(*) FROM album WHERE sanatci.sanatciID = album.sanatciID) WHERE sanatciID = NEW.sanatciID;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER album_after_insert
AFTER INSERT ON album
FOR EACH ROW EXECUTE FUNCTION update_album_sayisi();
""")
            

            cur.execute("""
CREATE OR REPLACE FUNCTION bilet_satis(konser_id INTEGER, satilan_bilet_sayisi INTEGER) RETURNS VOID AS $$
BEGIN
    UPDATE konser
    SET biletSayisi = biletSayisi - satilan_bilet_sayisi
    WHERE konserID = konser_id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION bilet_sayisi_azalt() RETURNS TRIGGER AS $$
BEGIN
    IF NEW.biletSayisi < 0 THEN
        RAISE EXCEPTION 'Yetersiz bilet';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER bilet_satildi
AFTER UPDATE OF biletSayisi ON konser
FOR EACH ROW EXECUTE FUNCTION bilet_sayisi_azalt();
""")
            
            cur.execute("""ALTER TABLE album ADD COLUMN sarki_sayisi INT;

UPDATE album SET sarki_sayisi = (SELECT COUNT(*) FROM sarki WHERE album.albumID = sarki.albumID);
""")
            cur.execute("""CREATE OR REPLACE FUNCTION yeni_sarki_eklendi() RETURNS TRIGGER AS $$
BEGIN
    UPDATE album SET sarki_sayisi = (SELECT COUNT(*) FROM sarki WHERE album.albumID = sarki.albumID);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER yeni_sarki_eklendi_trigger
AFTER INSERT ON sarki
FOR EACH ROW EXECUTE FUNCTION yeni_sarki_eklendi();
""")
            cur.execute("""CREATE OR REPLACE FUNCTION konser_tarihi_kontrol()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.tarih < CURRENT_DATE THEN
        RAISE EXCEPTION 'Konser Tarihi ileri bir tarihte olmalÄ±';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER konser_tarihi_kontrol_trigger
BEFORE INSERT ON konser
FOR EACH ROW EXECUTE FUNCTION konser_tarihi_kontrol();
""")
            cur.execute("""CREATE OR REPLACE FUNCTION oy_kontrol()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.oySayisi < 0 OR NEW.oySayisi > 10 THEN
        RAISE EXCEPTION 'Oy sayÄ±sÄ± 0 ile 10 arasÄ±nda olmalÄ±dÄ±r';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER oy_kontrol_trigger
BEFORE INSERT OR UPDATE ON oy
FOR EACH ROW EXECUTE FUNCTION oy_kontrol();
""")
            
            
        

            """VERÄ° EKLEME"""
        
            cur.execute("""
                    INSERT INTO sanatci(sanatciAdi,ulke,bio) values 
                    ('Tarkan', 'TÃ¼rkiye', 'Tarkan Tevetoglu, TÃ¼rk ÅarkÄ±cÄ±, sÃ¶z yazarÄ± ve prodÃ¼ktÃ¶rdÃ¼r.'),
                    ('Sezen Aksu', 'TÃ¼rkiye', 'Fatma Sezen YÄ±ldÄ±rÄ±m, TÃ¼rk ÅarkÄ±cÄ± ve sÃ¶z yazarÄ±dÄ±r.'),
                    ('George Michael', 'Ä°ngiltere', 'Georgios Kyriacos Panayiotou, Ä°ngiliz ÅarkÄ±cÄ±, sÃ¶z yazarÄ± ve yapÄ±mcÄ±dÄ±r.'),
                    ('Amy Winehouse','Ä°ngiltere', 'Amy Jade Winehouse, Ä°ngiliz ÅarkÄ±cÄ± ve sÃ¶z yazarÄ±dÄ±r.'),
                    ('Elton John', 'Ä°ngiltere', 'Reginald Kenneth Dwight, Ä°ngiliz ÅarkÄ±cÄ±, sÃ¶z yazarÄ± ve piyanisttir.'),
                    ('Janis Joplin', 'ABD', 'Janis Lyn Joplin, AmerikalÄ± ÅarkÄ±cÄ± ve sÃ¶z yazarÄ±dÄ±r.'),
                    ('Frank Ocean', 'ABD', 'Christopher Edwin Breaux, AmerikalÄ± ÅarkÄ±cÄ±, sÃ¶z yazarÄ± ve yapÄ±mcÄ±dÄ±r.'),
                    ('Haluk Levent', 'TÃ¼rkiye', 'Haluk Levent, TÃ¼rk rock mÃ¼zik ÅarkÄ±cÄ±sÄ± ve sÃ¶z yazarÄ±dÄ±r.'),
                    ('Zeki MÃ¼ren', 'TÃ¼rkiye', 'Zeki MÃ¼ren, TÃ¼rk sanat mÃ¼ziÄi sanatÃ§Ä±sÄ±dÄ±r.'),
                    ('Fikret KÄ±zÄ±lok', 'TÃ¼rkiye', 'Fikret KÄ±zÄ±lok, TÃ¼rk rock mÃ¼ziÄi sanatÃ§Ä±sÄ± ve mÃ¼zik Ã¶Äretmenidir.'),
                    ('BarÄ±Å ManÃ§o', 'TÃ¼rkiye', 'BarÄ±Å ManÃ§o, TÃ¼rk rock mÃ¼zik sanatÃ§Ä±sÄ±, ÅarkÄ±cÄ±, besteci, yazar ve televizyon programcÄ±sÄ±dÄ±r.'),
                    ('Emre AydÄ±n',  'TÃ¼rkiye', 'Emre AydÄ±n, TÃ¼rk rock mÃ¼zik ÅarkÄ±cÄ±sÄ± ve sÃ¶z yazarÄ±dÄ±r.'),
                    ('Kenan DoÄulu',  'TÃ¼rkiye', 'Kenan DoÄulu, TÃ¼rk pop mÃ¼ziÄi sanatÃ§Ä±sÄ±dÄ±r.'),
                    ('Sertab Erener', 'TÃ¼rkiye', 'Sertab Erener, TÃ¼rk pop mÃ¼ziÄi sanatÃ§Ä±sÄ± ve sÃ¶z yazarÄ±dÄ±r.'),
                    ('Cem Karaca', 'TÃ¼rkiye', 'Cem Karaca, TÃ¼rk rock mÃ¼ziÄi sanatÃ§Ä±sÄ± ve siyasi aktivisttir.'),
                    ('Prince',  'ABD', 'Prince Rogers Nelson, AmerikalÄ± mÃ¼zisyen, ÅarkÄ±cÄ±, sÃ¶z yazarÄ± ve aktÃ¶rdÃ¼r.'),
                    ('Severe Torture', 'Hollanda', 'Severe Torture, HollandalÄ± bir death metal grubudur.'),
                    ('Ludwig van Beethoven', 'Almanya', 'Ludwig van Beethoven, Ã¼nlÃ¼ bir Alman besteci ve piyanisttir.'),
                    ( 'Miles Davis', 'ABD', 'Miles Davis, AmerikalÄ± bir caz trompetÃ§isi, besteci ve bandleaderdÄ±r.'),
                    ( 'John Coltrane', 'ABD', 'John Coltrane, AmerikalÄ± bir caz saksofonisti ve bestecisidir.'),
                    ( 'BeyoncÃ©', 'ABD', 'BeyoncÃ©, AmerikalÄ± R&B ÅarkÄ±cÄ±sÄ±, sÃ¶z yazarÄ± ve oyuncusudur.'),
                    ( 'Usher', 'ABD', 'Usher, AmerikalÄ± R&B ÅarkÄ±cÄ±sÄ±, dansÃ§Ä± ve aktÃ¶rdÃ¼r.'),
                    ( 'Alicia Keys', 'ABD', 'Alicia Keys, AmerikalÄ± R&B ÅarkÄ±cÄ±sÄ±, sÃ¶z yazarÄ± ve yapÄ±mcÄ±sÄ±dÄ±r.'),
                    ( 'Kendrick Lamar', 'ABD', 'Kendrick Lamar, AmerikalÄ± bir hip hop sanatÃ§Ä±sÄ± ve sÃ¶z yazarÄ±dÄ±r.'),
                    ( 'Nicki Minaj', 'ABD', 'Nicki Minaj, Trinidad doÄumlu AmerikalÄ± bir rapÃ§i, ÅarkÄ±cÄ± ve sÃ¶z yazarÄ±dÄ±r.'),
                    ( 'J. Cole', 'ABD', 'J. Cole, AmerikalÄ± bir rapÃ§i, sÃ¶z yazarÄ± ve yapÄ±mcÄ±dÄ±r.'),
                    ( 'Drake', 'Kanada', 'Drake, KanadalÄ± bir rapÃ§i, ÅarkÄ±cÄ± ve sÃ¶z yazarÄ±dÄ±r.'),
                    ( 'Cardi B', 'ABD', 'Cardi B, AmerikalÄ± bir rapÃ§i, ÅarkÄ±cÄ± ve televizyon kiÅiliÄidir.'),
                    ( 'Eminem', 'ABD', 'Eminem, AmerikalÄ± rapÃ§i, ÅarkÄ±cÄ±, sÃ¶z yazarÄ± ve yapÄ±mcÄ±dÄ±r.'),
                    ( 'Sagopa K', 'TÃ¼rkiye', 'Sagopa K, TÃ¼rk rap mÃ¼ziÄi sanatÃ§Ä±sÄ± ve sÃ¶z yazarÄ±dÄ±r.'),
                    ( 'Nas', 'ABD', 'Nas, AmerikalÄ± rapÃ§i ve sÃ¶z yazarÄ±dÄ±r.'),
                    ( 'Kanye West', 'ABD', 'Kanye West, AmerikalÄ± rapÃ§i, yapÄ±mcÄ± ve modacÄ±dÄ±r.')
                    ; 
                    """)     
            cur.execute("""
                    INSERT INTO tur(turAdi) values
                    ('Pop'),
                    ('Jazz'),
                    ('Rock'),
                    ('R&B'),
                    ('Sanat mÃ¼ziÄi'),
                    ('Blues'),
                    ('Hip Hop'),
                    ('Klasik'),
                    ('Rap'),
                    ('Metal');
                    """)
            cur.execute("""
                    INSERT INTO album(sanatciid,turid,yayinTarih,albumAdi) values
(1, 1, '1997-12-05', 'ÃlÃ¼rÃ¼m Sana'),
(2, 1, '2001-01-01', 'DÃ¼Å BahÃ§eleri'),
(3, 1, '1996-05-13', 'Older'),
(4, 1, '2003-10-20', 'Frank'),
(5, 1, '1983-04-30', 'Too Low for Zero'),
(6, 3, '1968-08-12', 'Big Brother and the Holding Company'),
(7, 1, '2012-07-10', 'Channel Orange'),
(7, 6, '2011-02-18', 'Nostalgia, Ultra'),
(8, 3, '1993-01-01', 'Bu AteÅ SÃ¶nmez'),
( 9, 5, '1989-01-01', 'Sev Beni'),
( 10, 3, '1985-01-01', 'Yana yana'),
( 11, 3, '1969-01-01', 'ManÃ§oloji V1'),
( 12, 3, '2013-01-01', 'Afili YalnÄ±zlÄ±k'),
( 13, 1, '1993-10-25', 'YaparÄ±m Bilirsin'),
( 18, 8, '1803-04-05', 'Symphony No. 3 in E-flat major, Op. 55 "Eroica"'),
( 14, 1, '2003-05-06', 'Turuncu'),
( 15, 3, '1987-01-01', 'Nerde KalmÄ±ÅtÄ±k'),
( 16, 1, '1979-04-07', 'Prince'),
( 17, 10, '2000-01-01', 'Feasting on Blood'),
( 19, 2, '1957-12-04', 'Round About Midnight'),
( 20, 2, '1957-11-26', 'Blue Train'),
( 21, 4, '2008-11-14', 'I Am... Sasha Fierce'),
( 21, 4, '2013-12-13', 'BeyoncÃ©'),
( 22, 4, '1994-08-30', 'Usher'),
( 23, 4, '2003-12-02', 'The Diary of Alicia Keys'),
( 24, 7, '2012-10-22', 'good kid, m.A.A.d city'),
( 25, 7, '2010-11-22', 'Pink Friday'),
( 26, 7, '2018-04-20', 'KOD'),
( 27, 7, '2013-09-24', 'Nothing Was the Same'),
( 28, 7, '2018-04-06', 'Invasion of Privacy'),
( 29, 9, '2002-05-26', 'The Eminem Show'),
( 30, 9, '2000-10-27', 'Bir Pesimistin GÃ¶zyaÅlarÄ±'),
( 31, 9, '2001-04-17', 'Stillmatic')

                    ;                                                                                       
                    """)
            cur.execute(""" 
                    CALL sarki_ekle( 1, 'Ä°nci Tanem', 5.28);
                    CALL sarki_ekle(1, 'Unut Beni', 3.43);
                    CALL sarki_ekle(2,'KaÃ§Ä±n KurasÄ±',3.45);
                    CALL sarki_ekle(2,'Zalim',3.48);
                    CALL sarki_ekle(3,'Move on',4.45);
                    CALL sarki_ekle(4,'Know you know',3.03);
                    CALL sarki_ekle(4,'Take the box',3.20);
                    CALL sarki_ekle(5,'Kiss the bride',4.22);
                    CALL sarki_ekle(5,'Dreamboat',3.13);
                    CALL sarki_ekle(6,'Call on me',4.24);
                    CALL sarki_ekle(7,'Sierra Leone',5.13);
                    CALL sarki_ekle(8,'Swim good',4.17);
                    CALL sarki_ekle(9,'Ankara',4.51);
                    CALL sarki_ekle(9,' Bu AteÅ SÃ¶nmez',4.02);
                    CALL sarki_ekle(10,' Seni nasÄ±l sevdim',3.16);
                    CALL sarki_ekle(10,' AkÅam olur gizli gizli',4.56);
                    CALL sarki_ekle(11,'Bir HarmanÄ±m Bu akÅam',2.32);
                    CALL sarki_ekle(12,'GÃ¼l Pembe',2.36);
                    CALL sarki_ekle(12,'UnutamadÄ±m',4.01);
                    CALL sarki_ekle(13,'Afili YalnÄ±zlÄ±k',5.01);
                    CALL sarki_ekle(13,'Dayan YalnÄ±zlÄ±ÄÄ±m',3.45);
                    CALL sarki_ekle(14,'YaparÄ±m Bilirsin',3.45);
                    CALL sarki_ekle(15,'Symphony No. 3 in E-flat major, Op. 55 "Eroica"',14.12);
                    CALL sarki_ekle(16,'SÃ¶z bitti',2.12);
                    CALL sarki_ekle(16,'BaÅa DÃ¶neceksin',3.51);
                    CALL sarki_ekle(17,'Sen de BaÅÄ±nÄ± AlÄ±p Gitme',4.36);
                    CALL sarki_ekle(17,'Herkes Gibisin',4.01);
                    CALL sarki_ekle(18,'Purple Rain',6.13);
                    CALL sarki_ekle(19,'Twist the cross',2.59);
                    CALL sarki_ekle(19,'Feces for Jesus',4.04);
                    CALL sarki_ekle(20,'All of You',3.16);
                    CALL sarki_ekle(32,'Maskeli Balo',4.12);
                               """)    
            cur.execute(""" INSERT INTO muzik_video(sarkiid,yonetmen,cekimTarihi,link) values 
                        (8,'UNKNOW','2002-03-08','https://youtu.be/7JJH5GZPJNw?si=2-gtQbsVOBnANaRZ'),
                        (5,'UNKNOW','2001-02-01','https://youtu.be/oCXfMJnGWaA?si=aJb72dj9BCXp3hRf'),
                        (6,'UNKNOW','1980-04-02','https://youtu.be/TvnYmWpD_T8?si=IJHJJv_gGe9rLUAo')
                        ;""")
            cur.execute("""INSERT INTO konser(sanatciid,mekan,tarih,biletSayisi) values
                        (12,'Ä°stanbul','2024-01-05',589),
                        (30,'Ankara','2024-04-10',432),
                        (17,'Ä°stanbul','2024-01-05',235)
                        ;""")
            cur.execute("""INSERT INTO podcast(sanatciid,baslik) values
                        (8,'SanatÃ§Ä±larla SÃ¶yleÅi'),
                        (21,'POP 2023'),
                        (14,'DÃ¶nsÃ¼n DÃ¼nya')
                        ;""")
            cur.execute("""
                    SELECT premium_kullanici_ekle('mkayik45','mehmet12122413','mehmet@hotmail.com','2016-01-03',130);
                    SELECT premium_kullanici_ekle('christinwe','sophie12','sophiechristine@hotmail.com','2022-03-03',45);
                    SELECT standart_kullanici_ekle('fonkkow','17858qw-1','fonkkow@hotmail.com','2023-09-01',15);
                    SELECT standart_kullanici_ekle('flash','flashing1213','flashh@hotmail.com','2018-01-03',20);""")
            cur.execute(""" INSERT INTO calma_listesi(kullaniciid,calmalistesiAdi) values
                        (1,'Yerli ÅarkÄ±lar'),
                        (1,'YabancÄ± ÅarkÄ±lar'),
                        (2, 'Dance'),
                        (3,'Fear on row'),
                        (4,'matlover'),
                        (4,'flashtvseriessongs')
                        ;""")
            cur.execute("""SELECT oy_ile_degerlendirme(5,2,'2023-01-01',9);
                        SELECT oy_ile_degerlendirme(16,3,'2023-11-11',1);
                        SELECT oy_ile_degerlendirme(30,4,'2023-07-01',2);
                        """)
            cur.execute("""SELECT inceleme_ile_degerlendirme(
                        21,1,'2012-02-06','ÅarkÄ±yÄ± Ã§ok beÄendim'
                         );
                        SELECT inceleme_ile_degerlendirme(
                        23,4,'2018-11-12','ÅarkÄ±nÄ±n her anÄ± Ã§ok duygusal'
                         );
                        SELECT inceleme_ile_degerlendirme(
                        12,1,'2012-02-06','ÅarkÄ±yÄ± hiÃ§ beÄenmedim, vokal Ã§ok kÃ¶tÃ¼'
                         );
                        """)
            cur.execute("""SELECT katkida_bulunan_ekle_soz(16,'Sezen Aksu','YarÄ±ndan haber yok, dÃ¼n bitti
                            Saatler son gÃ¼nÃ¼ Ã§alÄ±p gitti
                            Yeminler yaÅlandÄ± dudaklarda
                            DÃ¼ÄÃ¼mlendi derken sÃ¶z bitti
                            Vagonlar bi dolup, bi boÅaldÄ±
                            Kuruyan gÃ¶zlerim yine yaÅardÄ±
                            SarardÄ± sÄ±rayla fotoÄraflar
                            Ne hayatlar iÃ§imde kaldÄ±
                            Unutursun iÃ§in yana yana
                            Unutursun, Ã¶lÃ¼m sana, bana
                            Zaman basÄ±p kanayan yarana
                            Unutursun, unutursun','SÃ¶z bitti');
                        
                        SELECT katkida_bulunan_ekle_soz(17,'Cem Karaca','Sende baÅÄ±nÄ± alÄ±p gitme ne olur. ne olur tut ellerimi
                        Hayatta hiÃ§bir Åeyim az olmadÄ± senin kadar
                        HiÃ§bir Åeyi istemedim seni istediÄim kadar
                        Sende baÅÄ±nÄ± alÄ±p gitme ne olur. ne olur tut ellerimi
                        Hayatta hiÃ§bir Åeyim az olmadÄ± senin kadar
                        HiÃ§bir Åeyi istemedim seni istediÄim kadar
                        Sende baÅÄ±nÄ± alÄ±p gitme ne olur. ne olur tut ellerimi
                        Ne olur, ne olur','Sen de BaÅÄ±nÄ± AlÄ±p Gitme');                       
                        """)
            cur.execute("""SELECT katkida_bulunan_ekle_produktor(32,'Sagopa Kajmer','SK');
                            SELECT katkida_bulunan_ekle_produktor(18,'Prince and the Revolution','Warner Bros.');
                        """)
            cur.execute("""SELECT katkida_bulunan_ekle_ensturman(19,'Thijs van Laarhoven','Gitar');
                            SELECT katkida_bulunan_ekle_ensturman(9,'Fahir AtakoÄlu','Piyano');
""")
            
            
        
def menu():

        conn = connect(host = "localhost",
                      user = "postgres",
                      password = "1411", 
                      port = 5432,
                      database = "muzikprogrami")
        conn.set_isolation_level(auto_commit)
        cur = conn.cursor()
        secenek = -1
        menu = PrettyTable()
        menu.field_names = ["SeÃ§enek", "AÃ§Ä±klama"]
        menu.add_row(["1", "TÃ¼m sanatÃ§Ä±larÄ± gÃ¶rÃ¼ntÃ¼lemek"])
        menu.add_row(["2", "SanatÃ§Ä± eklemek"])
        menu.add_row(["3", "SanatÃ§Ä± Ã§Ä±karmak"])
        menu.add_row(["4", "Bir albÃ¼mdeki ÅarkÄ±lara gÃ¶z atmak"])
        menu.add_row(["5", "Ä°stediÄiniz sanatÃ§Ä±nÄ±n albÃ¼mlerini sÄ±ralamak"])
        menu.add_row(["6", "AlbÃ¼m eklemek"])
        menu.add_row(["7", "AlbÃ¼m Ã§Ä±karmak"])
        menu.add_row(["8", "TÃ¼m AlbÃ¼mleri GÃ¶rÃ¼ntÃ¼lemek"])
        menu.add_row(["9", "Ä°stediÄiniz albÃ¼me ÅarkÄ± eklemek"])
        menu.add_row(["10", "GÃ¶rmek istediÄiniz albume katkÄ±da bulunanlarÄ± sÄ±ralama"])
        menu.add_row(["11", "AlbÃ¼mleri tÃ¼rÃ¼ ile sÄ±ralama"])
        menu.add_row(["12", "AlbÃ¼m isminin iÃ§inde bulunan bir Åeyi girerek albÃ¼mÃ¼ bulmak"])
        menu.add_row(["13", "Konser gÃ¶rÃ¼ntÃ¼le"])
        menu.add_row(["14", "Konser ekle"])
        menu.add_row(["15", "Konser iÃ§in bilet satÄ±n almak"])
        menu.add_row(["16", "AlbÃ¼mlerin sÃ¼resini hesaplama"])
        menu.add_row(["17", "DeÄerlendirmeleri gÃ¶rmek"])
        menu.add_row(["18", "DeÄerlendirme eklemek"])
        menu.add_row(["19", "ÅarkÄ± silmek"])
        menu.add_row(["20", "MÃ¼zik videosu sÄ±ralamak"])
        menu.add_row(["21", "MÃ¼zik videosu eklemek"])
        menu.add_row(["22", "KullanÄ±cÄ± eklemek"])
        menu.add_row(["23", "KullanÄ±cÄ± gÃ¶rÃ¼ntÃ¼lemek"])
        menu.add_row(["24", "KullanÄ±cÄ± silmek"])
        menu.add_row(["25", "KullanÄ±cÄ± gÃ¼ncellemek"])
        menu.add_row(["26", "Podcast gÃ¶rÃ¼ntÃ¼leme"])
        menu.add_row(["27", "KullanÄ±cÄ± Ã§alma listesi gÃ¶rÃ¼ntÃ¼leme"])
        menu.add_row(["28", "KullanÄ±cÄ± Ã§alma listesi ekleme"])
        menu.add_row(["29", "KullanÄ±cÄ± Ã§alma listesi silme"])
        menu.add_row(["0", "ÃÄ±kÄ±Å"])

    
        while secenek != 0:
            print(menu)
            print('MenÃ¼ye hoÅgeldiniz! YapacaÄÄ±nÄ±z iÅlemi seÃ§iniz')            
            secenek = input()
            if secenek == '1':
                """TÃ¼m sanatÃ§Ä±larÄ± gÃ¶rÃ¼ntÃ¼lemek """
                cur.execute("SELECT * FROM sanatci order by sanatciid")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                    continue            
            if secenek == '2':
                """SanatÃ§Ä± eklemek """
                sanatci_adi = input("SanatÃ§Ä± AdÄ±: ")
                ulke = input("Ãlke: ")
                bio = input("Biyografi: ")               
                cur.execute(f"""INSERT INTO sanatci(sanatciAdi,ulke,bio) VALUES ('{sanatci_adi}','{ulke}','{bio}');""")
                print(from_db_cursor(cur))
                print("\nSANATÃI BAÅARI Ä°LE EKLENDÄ°!\n")
                cur.execute("""SELECT * FROM sanatci order by sanatciid DESC LIMIT 1;
                             """)
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '3':
                """SanatÃ§Ä± Ã§Ä±karmak """
                cur.execute("SELECT * FROM sanatci order by sanatciid")
                print(from_db_cursor(cur))
                sanatciid = input("ÃÄ±karmak istediÄiniz sanatÃ§Ä±nÄ±n idsini lÃ¼tfen giriniz: ")
                cur.execute(f"""DELETE FROM sanatci WHERE sanatciid = {sanatciid};""")
                print(f"\n{sanatciid} nolu sanatÃ§Ä± silindi!\n")
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '4':
                """Bir albÃ¼mdeki ÅarkÄ±lara gÃ¶z atmak"""
                cur.execute("SELECT * FROM album order by albumid")
                print(from_db_cursor(cur))
                albumid = input("GÃ¶rmek istediÄiniz albÃ¼mÃ¼n idsini giriniz: ")
                cur.execute(f"""SELECT sarkiAdi,sure from sarki where albumid = {albumid}""")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '5':
                """Ä°stediÄiniz sanatÃ§Ä±nÄ±n albÃ¼mlerini sÄ±ralamak """
                cur.execute("SELECT sanatciid,sanatciadi FROM sanatci order by sanatciid ")
                print(from_db_cursor(cur))
                sanatciid = input("SanatÃ§Ä±nÄ±n idsini giriniz: ")
                cur.execute(f"SELECT album.albumadi,tur.turadi,album.yayintarih,album.sarki_sayisi FROM album INNER JOIN tur ON album.turid = tur.turid where sanatciid= {sanatciid} ")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '6':
                """AlbÃ¼m eklemek  """
                cur.execute("SELECT sanatciid,sanatciadi FROM sanatci order by sanatciid   ")
                print(from_db_cursor(cur))
                sanatciid = input("SanatÃ§Ä± idyi giriniz: ")
                albumadi = input("AlbÃ¼mÃ¼n adÄ±nÄ± giriniz: ")
                cur.execute("SELECT * from tur")
                print(from_db_cursor(cur))
                turid = input("AlbÃ¼mÃ¼n tÃ¼rÃ¼nÃ¼n idsini yazÄ±nÄ±z: ")
                yayinTarihi  = input("AlbÃ¼mÃ¼n yayÄ±n tarihini yazÄ±nÄ±z: ")
                cur.execute(f"""INSERT INTO album(sanatciid,turid,yayinTarih,albumAdi) values ({sanatciid},{turid},'{yayinTarihi}','{albumadi}')""")
                print(from_db_cursor(cur))
                cur.execute("""SELECT * from album order by albumid DESC LIMIT 1""")
                print(from_db_cursor(cur))
                print("Album eklendi!")
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '7':
                """AlbÃ¼m Ã§Ä±karmak """
                cur.execute("SELECT albumid,albumAdi FROM album order by albumid")
                print(from_db_cursor(cur))
                albumid = input("Silmek istediÄiniz albÃ¼mÃ¼n idyi giriniz: ")
                cur.execute(f"""DELETE FROM album WHERE albumid = {albumid}; """)
                print("\nBaÅarÄ±yla silindi!\n")
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '8':
                """TÃ¼m AlbÃ¼mleri GÃ¶rÃ¼ntÃ¼lemek  """
                cur.execute("SELECT album.albumid,album.albumadi,sanatci.sanatciAdi,tur.turadi,album.yayintarih,album.sarki_sayisi FROM album left join sanatci on sanatci.sanatciid = album.sanatciid left join tur on tur.turid = album.turid order by albumid")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '9':
                """Ä°stediÄiniz albÃ¼me ÅarkÄ± eklemek """
                cur.execute("SELECT albumid,albumadi FROM album")
                print(from_db_cursor(cur))
                albumid = input("Hangi albÃ¼me ÅarkÄ± eklemek istiyorsunuz id giriniz: ")
                cur.execute(f"""SELECT albumadi,sarki_sayisi from album where albumid = {albumid}""")
                print(from_db_cursor(cur))
                sarkiAdi = input("ÅarkÄ±nÄ±n adÄ±nÄ± giriniz: ")
                sure = input("ÅarkÄ±nÄ±n sÃ¼resini giriniz: ")
                cur.execute(f"""CALL sarki_ekle({albumid},'{sarkiAdi}',{sure});""")
                cur.execute(f"""SELECT sarkiAdi,sure from sarki where albumid = {albumid}""")
                print(from_db_cursor(cur))
                print("\nÅarkÄ±nÄ±z baÅarÄ± ile eklenmiÅtir!\n ")
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '10':
                """GÃ¶rmek istediÄiniz albume katkÄ±da bulunanlarÄ± sÄ±ralama"""
                cur.execute("SELECT albumid,albumadi FROM album order by albumid")
                print(from_db_cursor(cur))
                albumid = input("GÃ¶rmek istediÄiniz albÃ¼mÃ¼n idsini giriniz: ")
                cur.execute(f"""SELECT * FROM fn_katkida_bulunan_goster({albumid})""")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '11':
                """AlbÃ¼mleri tÃ¼rÃ¼ ile sÄ±ralama """
                cur.execute("""SELECT album.albumAdi, tur.turAdi
                FROM album
                JOIN tur ON album.turID = tur.turID
                ORDER BY tur.turAdi;""")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '12':
                """AlbÃ¼m isminin iÃ§inde bulunan bir Åeyi girerek albÃ¼mÃ¼ bulmak """
                kelime = input("Aramak istediÄiniz Åeyi yazÄ±nÄ±z: ")
                cur.execute(f"SELECT album_ara('{kelime}')")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '13':
                 """konser gÃ¶rÃ¼ntÃ¼le"""
                 cur.execute("SELECT konserid,sanatci.sanatciAdi,mekan,tarih,biletSayisi FROM konser left join sanatci on sanatci.sanatciid = konser.sanatciid order by konserid")
                 print(from_db_cursor(cur))
                 print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                 secenek == input()
                 if secenek == '1':
                     break
            if secenek == '14':
                """Konser eklemek"""
                
                cur.execute("SELECT * FROM sanatci order by sanatciid")
                print(from_db_cursor(cur))
                sanatciid = input("Sanatci id giriniz: ")
                mekan = input("Mekan adÄ±nÄ± giriniz: ")
                tarih = input("Tarihi giriniz: ")
                biletSayisi = input("Mevcut bilet sayÄ±sÄ±nÄ± girinz: ")
                cur.execute(f"INSERT INTO konser(sanatciid,mekan,tarih,biletSayisi) values ({sanatciid},'{mekan}','{tarih}',{biletSayisi})")
                print("HatalÄ± giriÅ tekrar deneyiniz")
                print("BaÅarÄ±yla yÃ¼klenmiÅtir!\n")
                cur.execute("SELECT konserid,sanatci.sanatciAdi,mekan,tarih,biletSayisi FROM konser left join sanatci on sanatci.sanatciid = konser.sanatciid order by konserid desc limit 1")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '15':
                """ Konser iÃ§in bilet satÄ±n almak """
                cur.execute("""SELECT konserid, sanatci.sanatciAdi,biletSayisi,mekan from konser inner join sanatci on sanatci.sanatciid = konser.sanatciid order by konserid""")
                print(from_db_cursor(cur))
                konserid = input("SatÄ±n almak istediÄiniz konserin idsini giriniz: ")
                biletSayisi = input("KaÃ§ adet bilet satÄ±n almak istiyorsunuz: ")
                cur.execute(f"""SELECT bilet_satis({konserid},{biletSayisi}) """)
                print("\nBilet satÄ±ÅÄ±nÄ±z gerÃ§ekleÅti!\n ")
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '16':
                """AlbÃ¼mlerin sÃ¼resini hesaplama"""
                cur.execute("SELECT albumid,albumadi FROM album order by albumid")
                print(from_db_cursor(cur))
                albumid = input("Hesaplamak istediÄiniz albÃ¼mÃ¼n idsini giriniz: ")
                cur.execute(f"""SELECT album_sure_hesapla({albumid})""")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '17':
                """DeÄerlendirmeleri gÃ¶rmek"""
                cur.execute("SELECT degerlendirmeid,sarki.sarkiadi,kullanici.kullaniciAdi,tarih, degerlendirmeturu FROM degerlendirme JOIN sarki on sarki.sarkiid = degerlendirme.sarkiid JOIN kullanici on kullanici.kullaniciid = degerlendirme.kullaniciid")
                print(from_db_cursor(cur))
                dgtur = input("GÃ¶rmek istediÄiniz deÄerlendirmenin idsini giriniz: ")
                cur.execute(f"SELECT degerlendirmeturu from degerlendirme where degerlendirmeid = {dgtur}")
                dturu = cur.fetchone()[0]
                if dturu == 'oy':
                    cur.execute(f"""Select degerlendirme_goruntule({dgtur})""")
                    tb = from_db_cursor(cur)
                    tb.field_names = ('Oy',)
                    print(tb)
                elif dturu == 'inceleme':
                    cur.execute(f"""Select degerlendirme_goruntule({dgtur})""")
                    tb = from_db_cursor(cur)
                    tb.field_names = ('Ä°nceleme Metni',)
                    print(tb)
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '18':
                """DeÄerlendirme eklemek """
                dtur = input("Ne tur deÄerlendirme eklemek istiyorsunuz:\n1-)Oy\n2-)Ä°nceleme\n")
                if dtur == '1':
                     cur.execute("""SELECT sarkiid,sarkiadi from sarki order by sarkiid""")
                     print(from_db_cursor(cur))
                     sarkiid = input("DeÄerlendirmek istediÄiniz ÅarkÄ±nÄ±n idsini giriniz: ")
                     cur.execute("""SELECT * from kullanici order by kullaniciid""")
                     print(from_db_cursor(cur))
                     kullaniciid = input("Kullanici idnizi giriniz: ")
                     oySayisi = input("Vermek istediÄiniz oyu 0-9 arasÄ±nda yazÄ±nÄ±z ")
                     cur.execute(f"""SELECT oy_ile_degerlendirme({sarkiid},{kullaniciid},CURRENT_DATE,{oySayisi}) """)
                     print("\nDeÄerlendirmeiniz baÅarÄ±yla kaydedildi\n")
                     cur.execute("""select d.degerlendirmeid,d.sarkiid,d.kullaniciid,d.tarih,o.oySayisi from degerlendirme d LEFT JOIN oy o on d.degerlendirmeid = o.degerlendirmeid order by degerlendirmeid desc limit 1""")
                     print(from_db_cursor(cur))
                if dtur == '2':
                     cur.execute("""SELECT sarkiid,sarkiadi from sarki order by sarkiid""")
                     print(from_db_cursor(cur))
                     sarkiid = input("DeÄerlendirmek istediÄiniz ÅarkÄ±nÄ±n idsini giriniz: ")
                     cur.execute("""SELECT * from kullanici order by kullaniciid""")
                     print(from_db_cursor(cur))
                     kullaniciid = input("Kullanici idnizi giriniz: ")
                     text = input("Ä°nceleme metninizi giriniz: ")
                     cur.execute(f"""SELECT inceleme_ile_degerlendirme({sarkiid},{kullaniciid},CURRENT_DATE,'{text}') """)
                     print("\nDeÄerlendirmeiniz baÅarÄ±yla kaydedildi\n")
                     cur.execute("""select d.degerlendirmeid,d.sarkiid,d.kullaniciid,d.tarih,i.incelemeMetni from degerlendirme d LEFT JOIN inceleme i on d.degerlendirmeid = i.degerlendirmeid order by degerlendirmeid desc limit 1""")
                     print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '19':
                """ÅarkÄ± silmek"""
                cur.execute("SELECT sarkiid,album.albumadi,sarkiadi,sure FROM sarki left join album on album.albumid = sarki.albumid order by sarkiid")
                print(from_db_cursor(cur))
                sarkiid = input("Silmek istediÄiniz ÅarkÄ±nÄ±n idsini giriniz: ")
                cur.execute(f"DELETE from sarki where sarkiid = {sarkiid}")
                print("\nBaÅarÄ±yla silindi!\n")
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '20':
                """MÃ¼zik videosu sÄ±ralamak"""
                cur.execute("SELECT sarki.sarkiadi, yonetmen, cekimTarihi,link FROM muzik_video LEFT JOIN sarki on sarki.sarkiid = muzik_video.sarkiid")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '21':
                """MÃ¼zik videosu eklemek"""
                cur.execute("""SELECT sarkiid,sarkiadi from sarki order by sarkiid""")
                print(from_db_cursor(cur))
                sarkiid = input("ÅarkÄ± id giriniz: ")
                yonetmen = input("YÃ¶netmenin ismini giriniz: ")
                cekimTarihi = input("Tarihi giriniz: ")
                link = input("Linki yazÄ±nÄ±z: ")
                cur.execute(f"""INSERT INTO muzik_video(sarkiid,yonetmen,cekimTarihi, link) values ({sarkiid},'{yonetmen}','{cekimTarihi}','{link}')""")
                cur.execute("""SELECT * from muzik_video order by videoid desc limit 1""")
                print(from_db_cursor(cur))
                print("\nBaÅarÄ±yla Eklendi\n")
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '22':
                """KullanÄ±cÄ± eklemek"""
                secim = input("Hangi tÃ¼r kullanÄ±cÄ± eklemek istiyorsunuz:\n1-)Premium\n2-)Standart\n")
                if secim == '1': 
                    kullaniciAdi = input("KullanÄ±cÄ± adÄ±nÄ± giriniz: ")
                    sifre = input("Åifreyi girin: ")
                    mail = input("Maili giriniz: ")
                    fiyat = input("Ãyelik fiyatÄ±nÄ± giriniz: ")
                    cur.execute(f"""SELECT premium_kullanici_ekle('{kullaniciAdi}','{sifre}','{mail}',CURRENT_DATE,{fiyat})""")
                    cur.execute("""SELECT * from kullanici order by kullaniciid desc limit 1""")
                    print(from_db_cursor(cur))
                    print("\nBaÅarÄ±yla Eklendi\n")
                    print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                if secim == '2':
                     kullaniciAdi = input("KullanÄ±cÄ± adÄ±nÄ± giriniz: ")
                     sifre = input("Åifreyi girin: ")
                     mail = input("Maili giriniz: ")
                     geÃ§ilenReklam = input("GeÃ§ilen reklamÄ± giriniz: ")
                     cur.execute(f"""SELECT standart_kullanici_ekle('{kullaniciAdi}','{sifre}','{mail}',CURRENT_DATE,{geÃ§ilenReklam})""")
                     cur.execute("""SELECT * from kullanici order by kullaniciid desc limit 1""")
                     print(from_db_cursor(cur))
                     print("\nBaÅarÄ±yla Eklendi\n")
                     print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '23':
                """KullanÄ±cÄ±larÄ± gÃ¶rÃ¼ntÃ¼lemek"""
                cur.execute("SELECT * FROM kullanici order by kullaniciid")
                print(from_db_cursor(cur))
                secim = input("DetayÄ±nÄ± gÃ¶rmek istediÄiniz kullanÄ±cÄ±nÄ±n idsini seÃ§iniz: ")
                cur.execute(f"SELECT hesapturu from kullanici where kullaniciid = {secim}")
                hturu = cur.fetchone()[0]
                if hturu == 's':
                     print("\nHesap Standart\n")
                     cur.execute(f"""SELECT kullanici_goruntule({secim})""")
                     tb = from_db_cursor(cur)
                     tb.field_names = ('GeÃ§ilen Reklam',)
                     print(tb)
                elif hturu == 'p':
                    print("\nHesap Premium\n")
                    cur.execute(f"""SELECT kullanici_goruntule({secim})""")
                    tb = from_db_cursor(cur)
                    tb.field_names = ('Fiyat',)
                    print(tb)
                
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '24':
                """KullanÄ±cÄ± silmek """
                cur.execute("SELECT * FROM kullanici order by kullaniciid")
                print(from_db_cursor(cur))
                kullaniciid = input("Silmek istediÄiniz kullanÄ±cÄ±nÄ±n idsini girimiz: ")
                cur.execute(f"DELETE FROM kullanici where kullaniciid = {kullaniciid}")
                print("\nKullanÄ±cÄ± baÅarÄ±yla silindi\n")
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '25':
                """KullanÄ±cÄ± gÃ¼ncellemek"""
                cur.execute("SELECT * FROM kullanici order by kullaniciid")
                print(from_db_cursor(cur))
                kullaniciid = input("Hangi kullanÄ±cÄ±yÄ± dÃ¼zenlemek istiyorsunuz, idsini giriniz: ")
                sec = input("\nHangi iÅlemi yapmak istiyorsunuz:\n1-)KullanÄ±cÄ± adÄ± deÄiÅtirmek\n2-)Åifre deÄiÅtirmek\n3-)mail deÄiÅtirmek\n4-)hesap turu deÄiÅtirmek\n")
                if sec == '1':
                     yenikullaniciadi = input("yeni kullanÄ±cÄ± adÄ±nÄ± giriniz: ")
                     cur.execute(f"UPDATE kullanici set kullaniciadi = '{yenikullaniciadi}' where kullaniciid = {kullaniciid}")
        
                     cur.execute(f"SELECT * FROM kullanici where kullaniciid={kullaniciid} order by kullaniciid")
                     print(from_db_cursor(cur))
                     print("\nGÃ¼ncelleme gerÃ§ekleÅti\n")
                if sec == '2':
                     yenisifre = input("yeni Åifreyi giriniz: ")
                     cur.execute(f"UPDATE kullanici set sifre = '{yenisifre}' where kullaniciid = {kullaniciid} ")
                     cur.execute(f"SELECT * FROM kullanici where kullaniciid={kullaniciid} order by kullaniciid")
                     print(from_db_cursor(cur))
                     print("\nGÃ¼ncelleme gerÃ§ekleÅti\n")
                if sec == '3':
                     yenimail = input("yeni maili giriniz: ")
                     cur.execute(f"UPDATE kullanici set sifre = '{yenimail}' where kullaniciid = {kullaniciid}")
                     cur.execute(f"SELECT * FROM kullanici where kullaniciid={kullaniciid} order by kullaniciid")
                     print(from_db_cursor(cur))
                     print("\nGÃ¼ncelleme gerÃ§ekleÅti\n")
                if sec == '4':
                    cur.execute(f"SELECT hesapturu from kullanici where kullaniciid = {kullaniciid}")
                    hturu = cur.fetchone()[0]
                    if hturu == 'p':
                         gecilenReklam = input("GeÃ§ilen reklamÄ± giriniz: ")
                         cur.execute(f"SELECT upgrade_account({kullaniciid},{gecilenReklam}) ")
                         print("\nGÃ¼ncelleme gerÃ§ekleÅti\n")
                         cur.execute(f"SELECT * from kullanici where kullaniciid = {kullaniciid} order by kullaniciid")
                         print(from_db_cursor(cur))
                    elif hturu == 's':
                         fiyat = input("FiyatÄ± giriniz: ")
                         cur.execute(f"SELECT upgrade_account({kullaniciid},{fiyat}) ")
                         print("\nGÃ¼ncelleme gerÃ§ekleÅti\n")
                         cur.execute(f"SELECT * from kullanici where kullaniciid = {kullaniciid} order by kullaniciid")
                         print(from_db_cursor(cur)) 
                    print("\nGÃ¼ncelleme gerÃ§ekleÅti\n")
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '26':
                """Podcast gÃ¶rÃ¼ntÃ¼leme"""
                cur.execute("SELECT s.sanatciAdi,baslik FROM podcast left join sanatci as s on podcast.sanatciid = s.sanatciid")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '27':
                """ KullanÄ±cÄ± Ã§alma listesi gÃ¶rÃ¼ntÃ¼leme """
                cur.execute("SELECT * FROM kullanici order by kullaniciid")
                print(from_db_cursor(cur))
                kullaniciid = input("Hangi kullanÄ±cÄ±nÄ±n Ã§alma listesini gÃ¶rÃ¼ntÃ¼lemek istiyorsun id giriniz: ")
                cur.execute(f"SELECT listeid,calmalistesiAdi FROM calma_listesi where kullaniciid = {kullaniciid} ")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '28':
                """"KullanÄ±cÄ± Ã§alma listesi ekleme"""
                cur.execute("""SELECT * FROM kullanici order by kullaniciid""")
                print(from_db_cursor(cur))
                kullaniciid = input("Hangi kullanÄ±cÄ±ya Ã§alma listesi eklemek istiyorsunuz id giriniz: ")
                calmalistesiAdi = input("Ãalma listesin adÄ±nÄ± giriniz: ")
                cur.execute(f"INSERT INTO calma_listesi(kullaniciid,calmalistesiAdi) values ({kullaniciid},'{calmalistesiAdi}') ")
                cur.execute("SELECT listeid,calmalistesiadi from calma_listesi order by listeID DESC limit 1")
                print(from_db_cursor(cur))
                print("\nKullanÄ±cÄ±nÄ±n Ã§alma listeleri:\n")
                cur.execute(f"SELECT listeid,calmalistesiAdi FROM calma_listesi where kullaniciid = {kullaniciid} ")
                print(from_db_cursor(cur))
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            if secenek == '29':
                """ KullanÄ±cÄ± Ã§alma listesi silme"""
                cur.execute("""SELECT * FROM kullanici order by kullaniciid""")
                print(from_db_cursor(cur))
                kullaniciid = input("Hangi kullanÄ±cÄ±nÄ±n Ã§alma listesini silmek istiyorsunuz : ")
                cur.execute(f"SELECT listeid,calmalistesiAdi FROM calma_listesi where kullaniciid = {kullaniciid} ")
                print(from_db_cursor(cur))
                listeid = input("Hangi Ã§alma listesini silmek istiyorsunuz : ")
                cur.execute(f"DELETE from calma_listesi where listeid = {listeid}")
                print("\nBaÅarÄ±yla silindi!\n")
                print("Geri menÃ¼ye dÃ¶nmek iÃ§in 1'e basÄ±nÄ±z")
                secenek == input()
                if secenek == '1':
                     break
            
            if secenek == '0':
                break
                 
            
              
createDB()
menu()


                        